var nmap_squared=function(e){function t(){var e,s=-Number.MAX_VALUE,d=Number.MAX_VALUE,o=-Number.MAX_VALUE,c=Number.MAX_VALUE,f,p;for(e=0;e<r.data.length;e++)f=parseFloat(r.data[e].x),p=parseFloat(r.data[e].y),f>s&&(s=f),d>f&&(d=f),p>o&&(o=p),c>p&&(c=p);for(i=s-d,h=o-c,n=r.width/i,u=r.height/h,u>n?u=n:n=u,e=0;e<r.data.length;e++)a.push({x:(parseFloat(r.data[e].x)-d)*n,y:(parseFloat(r.data[e].y)-c)*u,"class":1});var l=Math.ceil(Math.sqrt(a.length)),x=Math.pow(l,2),g=x-a.length;switch(r.method){case"border":var y=[];for(f=0;l>f;f++)y.push({"class":0,dist:Number.MAX_VALUE,x:i*n/l*f+i*n/l/2,y:0}),y.push({"class":0,dist:Number.MAX_VALUE,x:i*n/l*f+i*n/l/2,y:h*u});for(p=0;l>p;p++)y.push({"class":0,dist:Number.MAX_VALUE,x:0,y:h*u/l*p+h*u/l/2}),y.push({"class":0,dist:Number.MAX_VALUE,x:i*n,y:h*u/l*p+h*u/l/2});for(;g>0;)y=t.calcDist(y,a),a.push(y[y.length-1]),g--;break;case"quad":if(typeof d3.geom.quadtree!=typeof Function)throw"ERROR: If you want the quadtree method need to include the d3 library.";var m=[];for(e=0;e<a.length;e++)m.push([a[e].x,a[e].y]);var b=[[0,0],[i*n,h*u]],M=d3.geom.quadtree().extent(b)(m),v=i*n,w=h*u;w>v&&(v=w),w=v;var A=t.checkForEmptySquares(M,0,v,w,0,0);for(A=t.measureSquares(A,i*n,h*u);g>0;)a.push(A[A.length-g]),g--}}if(typeof nmap!=typeof Function)throw"ERROR: You need to include the nmap.js library.";var s={data:[],height:1,width:1,method:"border"},r=nmap_extend(s,e),a=[],i,h,n,u;return t.calcDist=function(e,t){for(var s=0;s<e.length;s++)for(var r=0;r<t.length;r++){var a=Math.sqrt((e[s].x-t[r].x)*(e[s].x-t[r].x)+(e[s].y-t[r].y)*(e[s].y-t[r].y));a<e[s].dist&&(e[s].dist=a)}return e.sort(function(e,t){return e.dist<t.dist?-1:e.dist>t.dist?1:0}),e},t.measureSquares=function(e,t,s){for(var r=0;r<e.length;r++)e[r].swidth=e[r].width,e[r].sheight=e[r].height,e[r].x>t||e[r].y>s?e[r].size=0:(e[r].x+e[r].width>t&&(e[r].swidth=t-e[r].x),e[r].y+e[r].height>s&&(e[r].sheight=s-e[r].y),e[r].size=e[r].sheight*e[r].swidth);return e.sort(function(e,t){return e.size<t.size?-1:e.size>t.size?1:0}),e},t.checkForEmptySquares=function(e,s,r,a,i,h){var n=[],u,d,o;if(!e.leaf){var c=0;for(o in e.nodes)c++;if(4>c){var f=[];for(o=0;4>o;o++)o in e.nodes||f.push(o);var p=[];for(f.indexOf(0)>=0&&f.indexOf(1)>=0?(p.push(0),p.push(1),n.push(t.createMissingRect(2,1,s,r,a,i,h))):f.indexOf(2)>=0&&f.indexOf(3)>=0?(p.push(2),p.push(3),n.push(t.createMissingRect(2,1,s,r,a,i,h+a/2))):f.indexOf(0)>=0&&f.indexOf(2)>=0?(p.push(0),p.push(2),n.push(t.createMissingRect(1,2,s,r,a,i,h))):f.indexOf(1)>=0&&f.indexOf(3)>=0&&(p.push(1),p.push(3),n.push(t.createMissingRect(1,2,s,r,a,i+r/2,h))),o=0;4>o;o++)if(p.indexOf(parseInt(o))<0&&f.indexOf(parseInt(o))>=0){switch(u=0,d=0,parseInt(o)){case 0:break;case 1:u=r/2;break;case 2:d=a/2;break;case 3:u=r/2,d=a/2}n.push(t.createMissingRect(1,1,s,r,a,i+u,h+d))}}for(o=0;4>o;o++)if(o in e.nodes){switch(u=0,d=0,parseInt(o)){case 0:break;case 1:u=r/2;break;case 2:d=a/2;break;case 3:u=r/2,d=a/2}n=n.concat(t.checkForEmptySquares(e.nodes[o],s+1,r/2,a/2,i+u,h+d))}}return n},t.createMissingRect=function(e,t,s,r,a,i,h){return{ox:i,oy:h,x:i+r/2*e/2,y:h+a/2*t/2,height:a/2*t,width:r/2*e,level:s,size:0,"class":0}},t(),{width:i*n,height:h*u,data:a}};